// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`hadamard operator should parse 1`] = `
Node {
  "comments": Array [],
  "end": 10,
  "errors": Array [],
  "loc": SourceLocation {
    "end": Position {
      "column": 10,
      "line": 1,
    },
    "start": Position {
      "column": 0,
      "line": 1,
    },
  },
  "program": Node {
    "body": Array [
      Node {
        "end": 10,
        "expression": Node {
          "end": 10,
          "left": Node {
            "elements": Array [
              Node {
                "end": 2,
                "extra": Object {
                  "raw": "4",
                  "rawValue": 4,
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 2,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 1,
                    "line": 1,
                  },
                },
                "start": 1,
                "type": "NumericLiteral",
                "value": 4,
              },
            ],
            "end": 3,
            "loc": SourceLocation {
              "end": Position {
                "column": 3,
                "line": 1,
              },
              "start": Position {
                "column": 0,
                "line": 1,
              },
            },
            "start": 0,
            "type": "ArrayExpression",
          },
          "loc": SourceLocation {
            "end": Position {
              "column": 10,
              "line": 1,
            },
            "start": Position {
              "column": 0,
              "line": 1,
            },
          },
          "operator": ".*",
          "right": Node {
            "elements": Array [
              Node {
                "end": 9,
                "extra": Object {
                  "raw": "4",
                  "rawValue": 4,
                },
                "loc": SourceLocation {
                  "end": Position {
                    "column": 9,
                    "line": 1,
                  },
                  "start": Position {
                    "column": 8,
                    "line": 1,
                  },
                },
                "start": 8,
                "type": "NumericLiteral",
                "value": 4,
              },
            ],
            "end": 10,
            "loc": SourceLocation {
              "end": Position {
                "column": 10,
                "line": 1,
              },
              "start": Position {
                "column": 7,
                "line": 1,
              },
            },
            "start": 7,
            "type": "ArrayExpression",
          },
          "start": 0,
          "type": "BinaryExpression",
        },
        "loc": SourceLocation {
          "end": Position {
            "column": 10,
            "line": 1,
          },
          "start": Position {
            "column": 0,
            "line": 1,
          },
        },
        "start": 0,
        "type": "ExpressionStatement",
      },
    ],
    "directives": Array [],
    "end": 10,
    "interpreter": null,
    "loc": SourceLocation {
      "end": Position {
        "column": 10,
        "line": 1,
      },
      "start": Position {
        "column": 0,
        "line": 1,
      },
    },
    "sourceType": "module",
    "start": 0,
    "type": "Program",
  },
  "start": 0,
  "type": "File",
}
`;
